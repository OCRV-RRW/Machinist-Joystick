COLORS = {"red", "blue", "yellow", "green"}

function init(self)
	self.cables_count = 0
	self.complete_count = 0
	self.cables = {}
	self.cables_target = {}
	for _, value in ipairs(COLORS) do
		self.cables_count = self.cables_count + 1
		self.cables[value] = value .. "_cable"
		table.insert(self.cables_target, value .. "_cable_target")
	end
	print(self.cables["red"])
	for color, cable in pairs(self.cables) do
		msg.post(cable .. "#cable", "init", {color = color, manager_id = go.get_id()})
	end
	shake_objects_by_y(self.cables_target, self.cables_count)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("complite") then
		self.complete_count = self.complete_count + 1
		if  self.complete_count >= self.cables_count then
			print("You win!")
			eventbus.publish('repair_fuse')
			eventbus.publish('finish_mini_game')
		end
	end
end

function on_input(self, action_id, action)
end

--- @param objects table objects url
--- @param length integer
function shake_objects_by_y(objects, length)
	math.randomseed(socket.gettime()) 
	for _, object_url in ipairs(objects) do
		local rand_i = math.random(1, length)
		local rand_object = objects[rand_i]
		local object_pos = go.get_position(object_url)
		local rand_pos = go.get_position(rand_object)
		go.set_position(object_pos, rand_object)
		go.set_position(rand_pos, object_url)
	end
end

