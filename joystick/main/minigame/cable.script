TOUCH_SQUARE_WIDTH = 100

local function point_within_rectangle_centroid(point_x, point_y, rectangle_x, rectangle_y, rectangle_width, rectangle_height)
	local width_half = rectangle_width / 2
	local height_half = rectangle_height / 2
	if point_x >= (rectangle_x - width_half) and point_x <= (rectangle_x + width_half) then
		if point_y >= (rectangle_y - height_half) and point_y <= (rectangle_y + height_half) then
			return true
		end
	end
	return false
end

local function dist2d(x1, y1, x2, y2)
	return ((x2-x1)^2+(y2-y1)^2)^0.5
end

local function angle_of_vector_between_two_points(x1,y1, x2,y2) 
	return math.atan2(y2-y1, x2-x1) 
end


local function animate_scale(self, dt)
	local anim_speed = 0.5
	if self.animate == "normal" then
		if self.scale.y > 1 then
			self.scale.y = self.scale.y - anim_speed * dt
		end
	end
	if self.animate == "grow" then
		if self.scale.y < 1.2 then
			self.scale.y = self.scale.y + anim_speed * dt
		end
	end
end

function init(self)
	self.animate = "normal" -- normal, grow
	self.color = "" -- :string  red, green, blue or yellow
	self.complete = false
	self.active = false
	msg.post(".", "acquire_input_focus")
	self.position = go.get_position()
	self.target_position = go.get_position()
	self.scale = go.get_scale()
end

function update(self, dt)
	animate_scale(self, dt)
	if self.active == false then
		return
	end
	local p = go.get_world_position()
	local distance = dist2d(p.x, p.y, self.target_position.x, self.target_position.y)
	self.scale.x = distance
	if self.scale.x > 0 then
		go.set_scale(self.scale)
	end
	local direction = angle_of_vector_between_two_points(p.x, p.y, self.target_position.x, self.target_position.y)
	local rotation = vmath.quat_rotation_z(direction)
	go.set_rotation(rotation)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("init") then
		self.color = message.color
		self.manager_id = message.manager_id
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") then
		if self.complete == true then
			return
		end
		local p = go.get_world_position()
		if point_within_rectangle_centroid(action.x, action.y, p.x, p.y, TOUCH_SQUARE_WIDTH, TOUCH_SQUARE_WIDTH) then
			self.active = true
		end

		local error_message, target_cable_pos = pcall(go.get_position, self.color .. "_cable_target")
		if error_message == false then
			self.active = false
			error("The color was not set or the desired color target was not created.")
			return
		end

		if not action.released then
			self.target_position.x = action.x
			self.target_position.y = action.y
			if not target_cable_pos ~= nil  then
				if point_within_rectangle_centroid(action.x, action.y, target_cable_pos.x, target_cable_pos.y, TOUCH_SQUARE_WIDTH, TOUCH_SQUARE_WIDTH) and self.active then
					self.animate = "grow"
				else
					self.animate = "normal"
				end
			end
		else
			if not target_cable_pos ~= nil  then
				if point_within_rectangle_centroid(action.x, action.y, target_cable_pos.x, target_cable_pos.y, TOUCH_SQUARE_WIDTH, TOUCH_SQUARE_WIDTH) and self.active then
					msg.post(self.manager_id, "complite", {color = self.color})
					self.complete = true
					self.animate = "normal"
				else
					self.scale.x = 1
					go.set_scale(self.scale)
					self.active = false
				end
			end
		end
	end
end