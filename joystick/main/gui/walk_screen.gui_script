local customstyle = require('main.gui.style')

local function back_button_click(self)
	eventbus.publish('disconnecting')
	self.back_button:set_enabled(false)
end

local function disconnected(self)
	local main_url = msg.url('main', '/root', 'script')
	msg.post(main_url, 'connection_menu')
	self.clicked = false
end

local function setup(self)
	self.back_button = self.druid:new_button(gui.get_node('back_btn'), back_button_click)

	self.back_button:set_style(customstyle)
	self.right = self.druid:new_button(gui.get_node('right'))
	self.left = self.druid:new_button(gui.get_node('left'))
	self.interaction = self.druid:new_button(gui.get_node('interaction'))

	self.right.on_pressed:subscribe(function (self, args, btn) eventbus.publish('move_interact', {key = ws.WALK.RIGHT, phase = ws.WALK.PHASE.DOWN}) end)
	self.right.on_click:subscribe(function (self, args, btn) 
		eventbus.publish('move_interact', {key = ws.WALK.RIGHT, phase = ws.WALK.PHASE.UP}) 
		eventbus.publish('move_interact', {key = ws.WALK.RIGHT, phase = ws.WALK.PHASE.CLICK})
	end)
	self.left.on_pressed:subscribe(function (self, args, btn) eventbus.publish('move_interact', {key = ws.WALK.LEFT, phase = ws.WALK.PHASE.DOWN}) end)
	self.left.on_click:subscribe(function (self, args, btn) 
		eventbus.publish('move_interact', {key = ws.WALK.LEFT, phase = ws.WALK.PHASE.UP}) 
		eventbus.publish('move_interact', {key = ws.WALK.LEFT, phase = ws.WALK.PHASE.CLICK})
	end)
	self.interaction.on_pressed:subscribe (function (self, args, btn) eventbus.publish('move_interact', {key = ws.WALK.INTERACTION, phase = ws.WALK.PHASE.DOWN}) end)
	self.interaction.on_click:subscribe(function (self, args, btn) 
		eventbus.publish('move_interact', {key = ws.WALK.INTERACTION, phase = ws.WALK.PHASE.UP}) 
		eventbus.publish('move_interact', {key = ws.WALK.INTERACTION, phase = ws.WALK.PHASE.CLICK})
	end)
end

local function init_events(self)
	self.on_disconnected = function() disconnected(self) end
	self.on_error = function() disconnected(self) end
	eventbus.subscribe('disconnected', self.on_disconnected)
	eventbus.subscribe('error', self.on_error)
end

local function drop_events(self)
	eventbus.unsubscribe('disconnected', self.on_disconnected)
	eventbus.unsubscribe('error', self.on_error)
	self.on_disconnected = nil
	self.on_error = nil
end


function init(self)
	self.druid = druid.new(self)
	setup(self)
	init_events(self)
end

function final(self)
	drop_events(self)
	self.druid:final()
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	self.druid:on_input(action_id, action)
end
