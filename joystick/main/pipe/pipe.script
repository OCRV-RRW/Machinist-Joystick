go.property("is_end", false)
go.property("vector", vmath.vector3())
go.property("color", -1)


local function update_pipe(self, vector, updated)
	if self.is_end then
		sprite.play_flipbook("#sprite", "end_pipe_grey")
    else
		sprite.play_flipbook("#sprite", self.type.."_pipe_grey")
	end

	if self.type == "line" then
		if vector.y == 0 then
			local rotation = vmath.quat_rotation_z(math.pi / 2)
			go.set_rotation(rotation)
		elseif vector.x == 0 then
			local rotation = vmath.quat_rotation_z(0)
			go.set_rotation(rotation)
		end
	elseif self.type == "curve" then
		if vector.x == -1 and vector.y == 1 then 
			local rotation = vmath.quat_rotation_z(math.pi)
			go.set_rotation(rotation)
		elseif vector.x == 1 and vector.y == -1 then
			local rotation = vmath.quat_rotation_z(0)
			go.set_rotation(rotation)
		elseif vector.x == -1 and vector.y == -1 then
			local rotation = vmath.quat_rotation_z(math.pi / 2 * -1)
			go.set_rotation(rotation)
		elseif vector.x == 1 and vector.y == 1 then 
			local rotation = vmath.quat_rotation_z(math.pi / 2)
			go.set_rotation(rotation)
		end
	elseif self.is_end then
		local new_vector = vector
		if updated == false then
			new_vector = vector * -1
		end

		if new_vector.x == 1 then
			local rotation = vmath.quat_rotation_z(math.pi / 2)
			go.set_rotation(rotation)
		elseif new_vector.x == -1 then
			local rotation = vmath.quat_rotation_z(math.pi / -2)
			go.set_rotation(rotation)
		elseif new_vector.y == 1 then
			local rotation = vmath.quat_rotation_z(math.pi)
			go.set_rotation(rotation)
		elseif new_vector.y == -1 then
			local rotation = vmath.quat_rotation_z(0)
			go.set_rotation(rotation)
		end
	end
end

function init(self)
	self.type = ""
	if self.is_end then
		self.type = "end"
	else
		self.type = "line"
	end

    update_pipe(self, self.vector, false)
end

function on_message(self, message_id, message, sender)
    if message_id == hash("update_pipe") then
		if (message.vector.x == 0 or message.vector.y == 0) then
			if self.is_end == false then
				self.type = "line"
				update_pipe(self, message.vector, true)
			else
				update_pipe(self, message.vector, true)
			end
		else
			if self.is_end == false then
				self.type = "curve"
				update_pipe(self, message.vector, true)
			end
		end
    end

    if message_id == hash("delete_pipe") then
        go.delete()
    end

	if message_id == hash("set_fail_state") then
		if self.is_end then
			sprite.play_flipbook("#sprite", "end_pipe_red")
		else
			sprite.play_flipbook("#sprite", self.type.."_pipe_red")
		end
	end

	if message_id == hash("set_ok_state") then
		if self.is_end then
			sprite.play_flipbook("#sprite", "end_pipe_green")
		else
			sprite.play_flipbook("#sprite", self.type.."_pipe_green")
		end
	end
end
